@model IEnumerable<mvc_app.Models.UserModel>

@{
    ViewData["Title"] = "ShowData";
}
<body>

    <input type="button" class="btn-primary" style="float:right;" value="Create" onclick="location.href='@Url.Action("userpage", "User")'" />
    <div><h3>Users Data</h3></div>
    <table class="table table-striped table-bordered"  id="myTable">
        <thead>
            <tr>
                <th onclick="sortTable(0)">
                    @Html.DisplayNameFor(model => model.Id)
                </th>
                <th onclick="sortTable(1)">
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th onclick="sortTable(2)">
                    @Html.DisplayNameFor(model => model.Email)
                </th>
                <th onclick="sortTable(3)">
                    @Html.DisplayNameFor(model => model.Comments)
                </th>
                <th onclick="sortTable(4)">
                    @Html.DisplayNameFor(model => model.Choice)
                </th>
                <th onclick="sortTable(5)">
                    @Html.DisplayNameFor(model => model.FileNames)
                </th>
                <th>
                    Download link
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Comments)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Choice)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FileNames)
                </td>
                <td><a href="@Url.Action("DownloadDiffFiles", "user", new {FileToDownload =   item.FileNames}) ">@item.FileNames</a></td>
                <td>
                    @Html.ActionLink("Edit", "EditUser", new { id = item.Id }) |
                    @Html.ActionLink("Delete User", "DeleteUser", new { id = item.Id })
                </td>
            </tr>
            }
        </tbody>
    </table>

    <script>
        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("myTable");
            switching = true;
            //Set the sorting direction to ascending:
            dir = "asc";
            /*Make a loop that will continue until
            no switching has been done:*/
            while (switching) {
                //start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /*Loop through all table rows (except the
                first, which contains table headers):*/
                for (i = 1; i < (rows.length - 1); i++) {
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                    one from current row and one from the next:*/
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    /*check if the two rows should switch place,
                    based on the direction, asc or desc:*/
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    //Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /*If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again.*/
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>
</body>